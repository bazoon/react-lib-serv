2. UIX  дизайн:

для любого из продуктов продумать компонент обратной связи , с помощью которого юзер сможет быстро найти нужный документ, раздел , отчет, а также получить справку об информации по работе в системе, в этом же разделе Администраторы будут загружать некий контент.
Подумать о возможности встраивания такого компонента в разные продукты.
Интерфейс должен обеспечить повышение продуктивности работы юзера ( спроектировать совместно с аналитиком), учитывая что юзер- среднестатистический человек с базовыми навыками работы с ПК, старше 40 лет

3. Адаптация дизайна под экраны разных устройств. Для продукта СК РТ. 
4. Добавление меток, примечаний и комментариев к телу  документа, загруженного в виде файла  
5. Повышение производительности (скорость отрисовки данных на экране) на существующих продуктах: начать с СК .Проанализировать текущую архитектуру, определить способы повышения скорости работы. Сейчас идет процесс проектирования расширения продукта, в след году планируется еще более существенное расширение ( перенос Капстрой в Ск РТ) , нужны предложения по используемым  компонентам
6. Продумать  возможность реализации компонента «сборки» АРМ руководителя. Потребность иметь в продукте АРМ есть у всех, и это всегда некие показатели, всегда между ними есть связи ( иерархия)  и  в АРМ нужна отрисовка их отношения друг к другу в виде таблиц, диаграмм, графиков. Но сам показатели всегда разные по названию. В этом сложность и трудоемкость



1) Компонент обратной связи. По описанию мне кажется, что компонент этот больше похож
на компонент поиска, его задача - помочь найти документ, раздел, отчет, справку. Когда речь идет о встраивании, я вспоминаю, что все наши продукты сделаны очень по разному.
Рызные версии одной и той же библиотеки, разные подходы внутри (платформенные или EAS).
И я думаю, что сделать такой компонент на какой-то одной платформе нельзя. Его потом трудно будет прикрутить к другой платформе. Например если компонент написан на ExtJS версии 6, то в систему, где версия 3, его вот так просто не вставить. Но можно его сделать кроссплатформенным, если написать его совсем без библиотек. При этом система, куда его будем встраивать, должна поддерживать некоторое API (то есть отдавать данные 
по запросу компонента). Здесь можно встраивать это API в каждую такую систему, или сделать один отдельный API сервис, который бы "знал" о существовании других систем и мог
бы отдавать информацию по любой из них. Но API часть - это уже бекенд, я тут могу только очень контурно рассуждать.

2) Адаптация дизайна под экраны разных устройств. Нужно определиться о каких именно
устройствах идет речь. И что именно понимается под адаптацией. Формально ExtJs поддерживает много браузеров, в том числе и мобильные (частично). Однако для мобильных
устройств должен предпочтительно использоваться Modern toolkit, а мы сейчас используем везде Classic toolkit (СК в частности). Многое осложняется тем, что СК построен на В4 платформенных компонентах, а они все из Classic Toolkit. Переделать это все на Modern может занять значительное время. Или можно определить, что именно мы хотим адаптировать, как именно должен выглядеть интерфейс на иных устройствах. Есть подходы для адаптации интерфейса и без смены toolkit, но это довольное скромные изменение: скрывать какие-то элементы интерфейса,или менять размеры, или положение. 

3) Добавление меток, примечаний и комментариев. Формально это задача и для фронта и для бекенда. Нужно создать интерфейс для такого рода добавлений и поддержку на бекенде для сохранения.

4) Повышение производительности. Это сложный вопрос, трудно что-то сказать без анализа. 
Но прежде чем повышать производительность, нужно описание того, что работает медленно. 
